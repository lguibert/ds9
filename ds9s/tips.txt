SET FOREIGN_KEY_CHECKS = 0;
TRUNCATE ds9s_analysis;
TRUNCATE ds9s_galaxy;
TRUNCATE ds9s_galaxyfeatures;
TRUNCATE ds9s_parfolder;


#   0 RA_DEC_NAME  
#   1 NUMBER          Running object number
#   2 X_IMAGE         Object position along x                         [pixel]
#   3 Y_IMAGE         Object position along y                         [pixel]
#   4 A_IMAGE         Profile RMS along major axis                    [pixel]
#   5 B_IMAGE         Profile RMS along minor axis                    [pixel]
#   6 THETA_IMAGE     Position angle (CCW/x)                          [deg]
#   7 X_WORLD         Barycenter position along world x axis          [deg]
#   8 Y_WORLD         Barycenter position along world y axis          [deg]
#   9 A_WORLD         Profile RMS along major axis (world units)      [deg]
#  10 B_WORLD         Profile RMS along minor axis (world units)      [deg]
#  11 THETA_WORLD     Position angle (CCW/world-x)                    [deg]
#  12 MAG_F1153W        Kron-like elliptical aperture magnitude         [mag]

#  12 MAG_F1573W        Kron-like elliptical aperture magnitude         [mag] f160

#  13 MAGERR_AUTO     RMS error for AUTO magnitude                    [mag]
#  14 CLASS_STAR      S/G classifier output
#  15 FLAGS           Extraction flags


NeV, OII, NeIII, Hbeta, OIII, Halpha, SII, SIII_9069, SIII_9532, HeI_10830


ni, nl , z, zerr, zflag, fwhm, fwhmerr, fwhmflag, ew, flux, fluxerr, sonn, fluxflag, contamflag, edgeflag, lam, qualflag


321_82.963646_-7.38544
      1   
      816.129   
      612.767     
      2.821     
      2.792      
      27.3  
      82.963646  
      -7.385446  
      0.000101  
      0.000099     
      -27.3    
      16.060     
      0.000     
      1.000    
      2
      """try:
            data = fits.getdata(file)
            fig = plt.figure()
            ax = fig.add_subplot(111)
            ax.plot(data)

            directory = "ds9s/upload/fits_png/"+gal.parfolder.name_par+"/"+str(gal.uniq_id)

            if not exists(directory):
                  makedirs(directory)

            fig.savefig(directory+'/'+short_name+'_'+gal.uniq_name+'.png')
            messages.success(request, u"PNG created.")
            return True
      except:
            messages.error(request, u"PNG unable.")
            return False"""

def showFits(request, id, pathToFits, zmin=None, zmax=None): # pathToFits is the pathway to one of the stamps in either the G102_DRIZZLE or G141_DRIZZLE directories
      try : 
            inFits=pyfits.open(pathToFits)
            #inFits.info() # shows contents of the FITS image
            iHdr=inFits[1].header # We will use data from this later
            iData=inFits[1].data # This is the image data

            #print iHdr['CRPIX1'],iHdr['CRVAL1'],iHdr['CDELT1']
            x0,l0,dl=iHdr['CRPIX1'],iHdr['CRVAL1'],iHdr['CDELT1'] # Get the x-pixel coordinate - to - wavelength mapping
            y0,a0,da=iHdr['CRPIX2'],iHdr['CRVAL2'],iHdr['CDELT2'] # Get the y-pixel coordinate - to - distance in arcsec map
            npixx,npixy=iData.shape[1],iData.shape[0] # get the number of pixels in each direction
            l1,l2,y1,y2 = l0-x0*dl, l0+(float(npixx)-x0)*dl, a0-y0*da, a0+(float(npixy)-y0)*da # set the min wavelength, max wavelength, min distance, max distance
          #print l1,l2,y1,y2

            xDispSize=6.0
            yDispSize=xDispSize*float(npixy)/float(npixx) # Size the image to scale with the image dimensions

            plt.ion() # Necessary for interactive Python (ipython) environment
            plt.figure(1,figsize=(xDispSize*1.3,yDispSize*2.5))
            plt.imshow(iData,cmap=cm.Greys_r,origin="lower",aspect=dl/da, extent=(l1,l2,y1,y2)) # Call imshow
            plt.axhline(y=0.0,c='cyan',linestyle=':') # Plot a blue dotted line at distance = 0
            plt.xlabel(r'Wavelength ($\AA$)')
            plt.ylabel('Distance (arcsec)')
            plt.draw() 
            inFits.close()
            return redirect("/ds9s/fits/view/"+str(id))
      except:
            messages.error(request, u"Error.")
            return redirect("/ds9s/fits/view/"+str(id))


@login_required
@permission_required('ds9s.update_user', raise_exception=True)
def focus(request, id):
      save = request.GET
      if save:
            user = get_object_or_404(User, id=id)
            return render(request, 'focus.html', {'user': user, 'save':save['save']})
      else:
            user = get_object_or_404(User, id=id)
            return render(request, 'focus.html', {'user': user})



class DeleteUser(DeleteView):
      model = User
      context_object_name = "u"
      template_name = "delete.html"
      success_url = "/ds9s/"

      @method_decorator(login_required)
      @method_decorator(permission_required('ds9s.user_delete',raise_exception=True))
      def dispatch(self, *args, **kwargs):
            return super(DeleteUser, self).dispatch(*args, **kwargs)



try:
                  if not exists(directory+str(gal.uniq_id)+"/F110W.svg"):
                        gen.append(makePngFFile(request, checked[2], gal, checked_short[2]))
                        time.sleep(1)
                        messages.info(request,"F110W Created")
                  if checked_short[3] == 'F160W':
                        if not exists(directory+str(gal.uniq_id)+"/F160W.svg"):
                              gen.append(makePngFFile(request, checked[3], gal, checked_short[3]))
                              messages.info(request,"F160W Created")
                  if checked_short[3] == 'F140W':
                        if not exists(directory+str(gal.uniq_id)+"/F140W.svg"):
                              gen.append(makePngFFile(request, checked[3], gal, checked_short[3]))
            except:
                  messages.warning(request, "No file for this galaxy.")

            time.sleep(1)
            gen.append(makePngGFile(request, checked[0], gal, checked_short[0]))
            gen.append(makePngGFile(request, checked[1], gal, checked_short[1]))


<div id="rootFiles" class="container-fluid">
            <div id="fFiles">
                  <div contenteditable="false" class="row">
                        <img id="f110" class="col-xs-6 col-md-5 figure" src="{{MEDIA_URL}}fits_png/{{gal.parfolder.name_par}}/{{gal.uniq_id}}/F110W.svg" contenteditable="true">
                        <div class="col-xs-2 col-md-2"></div>
                        <img id="f160140" class="col-xs-6 col-md-5 figure" src="{{MEDIA_URL}}fits_png/{{gal.parfolder.name_par}}/{{gal.uniq_id}}/F160W.svg" contenteditable="true"> 
                  </div>
                  <div contenteditable="false" class="row">
                        <div id='dataF110' class="col-xs-6 col-md-5">
                              <p>Cursor position => X:<span class="x"></span> - Y:<span class="y"></span></p>
                        </div>
                        <div id='dataF160140' class="col-md-offset-2 col-xs-6 col-md-5">
                              <p>Cursor position => X:<span class="x"></span> - Y:<span class="y"></span></p>
                        </div>
                  </div>
            </div>
            <div id="gFiles">
                  <div contenteditable="false" class="row">
                        <img id="g102" class="col-xs-12 col-md-12 figure" src="{{MEDIA_URL}}fits_png/{{gal.parfolder.name_par}}/{{gal.uniq_id}}/G102_{{gal.uniq_name}}.svg" contenteditable="true">
                        <div class="clear col-xs-12 col-md-12">
                              <p>Cursor position => X:<span class="x"></span> - Y:<span class="y"></span></p>
                        </div>
                  </div>
                  <div contenteditable="false" class="row">
                        <img id="g141" class="col-xs-12 col-md-12 figure" src="{{MEDIA_URL}}fits_png/{{gal.parfolder.name_par}}/{{gal.uniq_id}}/G141_{{gal.uniq_name}}.svg" contenteditable="true">
                        <div class="clear col-xs-12 col-md-12">
                              <p>Cursor position => X:<span class="x"></span> - Y:<span class="y"></span></p>
                        </div>
                  </div>
            </div>
      </div>



def makePngFFile(request, file, gal, short_name, zoom=10, raCenter=None, decCenter=None):
      #try:
      features = GalaxyFeatures.objects.filter(galaxy_id=gal.id).order_by('galaxyfields_id')
      raCenter = float(features[0].value)
      decCenter = float(features[1].value)

      inFits=pyfits.open(file)
      iHdr=inFits[1].header
      iData=inFits[1].data


      # Get parameters for converting Pixel Coordinates to Celestial Coordinates: Right ascension (RA) and Declination (Dec)
      x0,y0,ra0,dec0,drdx,drdy,dddx,dddy,fieldRotation=iHdr["CRPIX1"],iHdr["CRPIX2"],iHdr["CRVAL1"],iHdr["CRVAL2"],iHdr["CD1_1"],iHdr["CD1_2"],iHdr["CD2_1"],iHdr["CD2_2"],iHdr["ORIENTAT"]
          
      fieldRotation=-1.*fieldRotation 
      pixScaleR,pixScaleD=(drdy**2+drdx**2)**0.5 * 3600., (dddy**2+dddx**2)**0.5 * 3600. 
      xcen = (raCenter-ra0)*cos(dec0*pi/180.)*3600./pixScaleR*-1.*cos(pi*fieldRotation/180.)+(decCenter-dec0)*3600./pixScaleD*-1.*sin(pi*fieldRotation/180.)+x0 # OK, this transformation seems to get closest
      ycen = (raCenter-ra0)*cos(dec0*pi/180.)*3600./pixScaleR*-1.*sin(pi*fieldRotation/180.)+(decCenter-dec0)*3600./pixScaleD*1.*cos(pi*fieldRotation/180.)+y0 # OK, this transformation seems to get closest
             
      iFocus = iData[xcen-10:xcen+10,ycen-10:ycen+10]

      #pdb.set_trace()

      npixx,npixy=iData.shape[1],iData.shape[0]
      xDispSize=6.0
      yDispSize=xDispSize*float(npixy)/float(npixx)
            
      fig = plt.figure()
      plt.imshow(iFocus,cmap=cm.Greys_r,origin="lower")

      #return fig.ginput(n=10, timeout=15)
      """time.sleep(30)"""

      directory = "ds9s/upload/fits_png/"+gal.parfolder.name_par+"/"+str(gal.uniq_id)+"/"    
      result = savePng(request, directory, short_name, gal.uniq_name, fig)

      inFits.close()

      del fig
      return result
      #except:
      #     return False

def makePngGFile(request, file, gal, short_name):
      try:
            inFits=pyfits.open(file)
                              #inFits.info() # shows contents of the FITS image
            iHdr=inFits[1].header # We will use data from this later
            iData=inFits[1].data # This is the image data

                              #print iHdr['CRPIX1'],iHdr['CRVAL1'],iHdr['CDELT1']
            x0,l0,dl=iHdr['CRPIX1'],iHdr['CRVAL1'],iHdr['CDELT1'] # Get the x-pixel coordinate - to - wavelength mapping
            y0,a0,da=iHdr['CRPIX2'],iHdr['CRVAL2'],iHdr['CDELT2'] # Get the y-pixel coordinate - to - distance in arcsec map
            npixx,npixy=iData.shape[1],iData.shape[0] # get the number of pixels in each direction
            l1,l2,y1,y2 = l0-x0*dl, l0+(float(npixx)-x0)*dl, a0-y0*da, a0+(float(npixy)-y0)*da # set the min wavelength, max wavelength, min distance, max distance
                            #print l1,l2,y1,y2

            xDispSize=6.0
            yDispSize=xDispSize*float(npixy)/float(npixx) # Size the image to scale with the image dimensions

            fig = plt.figure(1,figsize=(xDispSize*1.3,yDispSize*2.5))
            plt.imshow(iData,cmap=cm.Greys_r,origin="lower",aspect=dl/da, extent=(l1,l2,y1,y2)) # Call imshow
            plt.axhline(y=0.0,c='cyan',linestyle=':') # Plot a blue dotted line at distance = 0
            plt.xlabel(r'Wavelength ($\AA$)')
            plt.ylabel('Distance (arcsec)')
            directory = "ds9s/upload/fits_png/"+gal.parfolder.name_par+"/"+str(gal.uniq_id)

            savePng(request, directory, short_name, gal.uniq_name, fig)

            inFits.close()
            messages.success(request, u"Image created (G FILE).")
            return True
      except:
            messages.error(request, u"Image unable.")
            return False

def savePng(request, directory, short_name, uniq_name, fig):
      try:
            if not exists(directory):
                        makedirs(directory)

            if short_name in ['F110W', 'F160W', 'F140W']:
                  fig.savefig(directory+'/'+short_name+".svg",bbox_inches='tight',pad_inches=0.3)
            else:
                  fig.savefig(directory+'/'+short_name+'_'+uniq_name+".svg",bbox_inches='tight',pad_inches=0.3)

            messages.success(request, u"Image saved.")
            return True
      except:
            messages.error(request, u"Error during saving image")
            return False


@login_required
def zoomFile(request, id):
      zoom = request.POST['zoom']

      try:
            zoom = int(zoom)
      except ValueError:
            messages.error(request,"Zoom value can contain only number")
            return redirect("/ds9s/fits/view/"+id+"/")

      try:
            gal = get_object_or_404(Galaxy, uniq_id=id)           
            checked, checked_short = checkAllFiles(gal.uniq_id, gal.parfolder.name_par)
            gen = []

            gen.append(makePngFFile(request, checked[2], gal, checked_short[2], zoom))
            time.sleep(1)
            gen.append(makePngFFile(request, checked[3], gal, checked_short[3], zoom))
            time.sleep(3)
            if not False in gen:
                  messages.success(request,"Images resizabled.")
                  return HttpResponseRedirect("/ds9s/fits/view/"+id+"/")
            else:
                  messages.error(request,"Error during images resizabling.")
                  return redirect("/ds9s/fits/view/"+id+"/")
      except:
            #just fix for the moment. Have to find a better solution
            messages.error(request,"Resize picture is a big work. Let the server get some rest for a second.")
            return redirect("/ds9s/fits/view/"+id+"/")

            <form action="/ds9s/fits/zoom/{{gal.uniq_id}}/" method="post">
                  {% csrf_token %}
                  <label for="zoom">Zoom:</label>
                  <input name="zoom" id="zoom" placeholder="100" type="number" min="0"/>
                  <input type="submit" class="btn btn-default" value="Zoom"/>
            </form>
      </div>


def remapPixelsLog(data):
      datastat = imagestats.ImageStats(data,nclip=3)
      minpex = datastat.mean
      maxpex = datastat.mean + 15 * datastat.stddev

      m = 1 / (np.log(maxpex) - np.log(minpex))
      b = np.log(minpex) * -1 / (np.log(maxpex) - np.log(minpex))

      data = np.log(data)
      data = data * m + b

      data[np.isnan(data)] = 0

      data[data<0]=0
      data[data>1]=1

      return data

#This function is for displaying the home page. 
def viewHomeGalaxy(request):
      galaxy_list = Galaxy.objects.values('uniq_id','id','uniq_name','parfolder').order_by('uniq_id') #get here all the needed information from galaxys
      analysis = Analysis.objects.raw('SELECT COUNT(DISTINCT user_id) as count, galaxy_id, id FROM ds9s_identifications group by galaxy_id') #how many analysis was done on galaxys
      
      #here, we just create a dictionnary with for key the galaxy's id and the number of analysis for value
      aly = {}
      for g in galaxy_list:
            aly[g['id']] = 0
      for a in analysis:
            aly[a.galaxy_id] = a.count

      #Django stuff to create pages
      paginator = Paginator(galaxy_list, 15)
      page = request.GET.get('page')
      try:
            galaxys = paginator.page(page)
      except PageNotAnInteger:
            galaxys = paginator.page(1)
      except EmptyPage:
            galaxys = paginator.page(paginator.num_pages)

      #send all the previous values to the homeGalaxy template
      return render(request, 'homeGalaxy.html',locals())


      template :
{% load ds9s_extras %}
      {% if galaxys %}
            {% for gal in galaxys%}
                  <div class="col-md-4">
                        <h1 class="first-uppercase">Galaxy n°{{gal.uniq_id}}</h1>
                        <h2>Field n°{{gal.parfolder}}</h2>
                        {% if user.is_authenticated%}
                              <a class="btn btn-default" href="/ds9s/view/{{gal.uniq_name}}/">See more</a>
                        {% endif %} 
                        <div class='nunAnaly'>{{aly|keyvalue:gal.id}} analysis yet</div>        
                  <hr>
                  </div>
            {%endfor%}

            <div class="pagination clear">
                  {% if galaxys.has_previous %}
                      <a class="btn btn-default" href="?page={{ galaxys.previous_page_number }}">Previous</a> —
                  {% endif %}
                  Page {{ galaxys.number }} on {{ galaxys.paginator.num_pages }} 
                  {% if galaxys.has_next %}
                      — <a class="btn btn-default" href="?page={{ galaxys.next_page_number }}">Next</a>
                  {% endif %}
            </div>
      {% else %}
            <h1>No data yet. <a href="/ds9s/upload/">Add some !</a></h1>
      {% endif %}


    <script type="text/javascript">
      $(document).ready(function(){
        alert("session"+$('section').height());
        alert('main'+$('#main').height());

        var bumpIt = function() {  
          if($('section').height() < $('#main').height()){
            var footer = $('footer').outerHeight();
              $('#main').css('padding-bottom', footer);

              $('footer').css("margin-top",-footer)

              height = ($('html').height() - $('.jumbotron').outerHeight()) - footer;


              $('#main').css('height', height);
          }
          else{
            alert("prout");
          }
        }


         bumpIt();


          $(window).resize(function() {
            bumpIt();
          });
      });

    </script>